{"version":3,"sources":["github_blue.png","straight-loader.gif","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","articles","id","map","article","index","key","href","rel","target","App","pages","useRef","useState","setArticles","loading","setLoading","alt","src","github","width","height","type","onChange","event","current","Number","value","onClick","axios","url","method","data","then","resp","catch","loader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,yKCe5BC,G,MAbF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACf,OACC,yBAAKC,GAAG,QAEP,4BACED,EAASE,KAAI,SAACC,EAASC,GACvB,OAAO,wBAAIC,IAAKD,GAAO,uBAAGE,KAAMH,EAASI,IAAI,sBAAsBC,OAAO,UAAUL,W,mDC8C1EM,MA/Cf,WACC,IAAIC,EAAQC,mBADE,EAEkBC,mBAAS,IAF3B,mBAEPZ,EAFO,KAEGa,EAFH,OAGgBD,mBAAS,GAHzB,mBAGPE,EAHO,KAGEC,EAHF,KA6Bd,OACC,yBAAKd,GAAG,OACP,yBAAKA,GAAG,QACP,uBAAGK,KAAK,4CAA4CC,IAAI,sBAAsBC,OAAO,UACpF,yBAAKQ,IAAI,cAAcC,IAAKC,IAAQC,MAAM,KAAKC,OAAO,SAGxD,yBAAKnB,GAAG,QACP,wBAAIA,GAAG,gBAAP,yDACA,2BAAOA,GAAG,aAAaoB,KAAK,OAAOC,SAjCb,SAACC,GACzBb,EAAMc,QAAUC,OAAOF,EAAMf,OAAOkB,UAiClC,4BAAQzB,GAAG,eAAe0B,QA9BT,WACnBZ,EAAW,GACXa,IAAM,CAELC,IAAK,iCACLC,OAAQ,OACRC,KAAM,CACLrB,MAAOA,EAAMc,WAGbQ,MAAK,SAAAC,GACLpB,EAAYoB,EAAKF,KAAK/B,UACtBe,EAAW,MAEXmB,OAAM,SAAAD,GACNlB,EAAW,QAeX,iBAEAD,EAAU,yBAAKb,GAAG,UAAS,yBAAKe,IAAI,SAASC,IAAKkB,IAAQhB,MAAM,MAAMC,OAAO,SAAqB,KACnG,kBAAC,EAAD,CAAMpB,SAAUA,MCrCCoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef048342.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github_blue.5abf563c.png\";","module.exports = __webpack_public_path__ + \"static/media/straight-loader.91931453.gif\";","import React from 'react';\n\nconst List = ({ articles }) => {\n\treturn (\n\t\t<div id=\"list\">\n\t\t\t{/* conditionally render: Please be patient... */}\n\t\t\t<ul>\n\t\t\t\t{articles.map((article, index) => {\n\t\t\t\t\treturn <li key={index}><a href={article} rel=\"noopener noreferrer\" target=\"_blank\">{article}</a></li>\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n\nexport default List;","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport List from './components/List';\nimport axios from 'axios';\nimport github from './github_blue.png';\nimport loader from './straight-loader.gif'\n\nfunction App() {\n\tlet pages = useRef();\n\tconst [articles, setArticles] = useState([]);\n\tconst [loading, setLoading] = useState(0);\n\n\tconst updatePagesValue = (event) => {\n\t\tpages.current = Number(event.target.value);\n\t}\n\n\tconst getArticles = () => {\n\t\tsetLoading(1)\n\t\taxios({\n\t\t\t//url: `${window.location.origin}/articles`,\n\t\t\turl: 'http://localhost:4000/articles',\n\t\t\tmethod: 'post',\n\t\t\tdata: {\n\t\t\t\tpages: pages.current\n\t\t\t}\n\t\t})\n\t\t\t.then(resp => {\n\t\t\t\tsetArticles(resp.data.articles)\n\t\t\t\tsetLoading(0)\n\t\t\t})\n\t\t\t.catch(resp => {\n\t\t\t\tsetLoading(0)\n\t\t\t\t// Something went wrong\n\t\t\t})\n\t}\n\n\treturn (\n\t\t<div id=\"app\">\n\t\t\t<div id=\"repo\">\n\t\t\t\t<a href=\"https://github.com/DaniBencz/blog_scraper\" rel=\"noopener noreferrer\" target=\"_blank\">\n\t\t\t\t\t<img alt=\"gitHub repo\" src={github} width=\"33\" height=\"33\"></img>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div id=\"form\">\n\t\t\t\t<h2 id=\"instructions\">Please type a number between 1 and 5, or leave empty!</h2>\n\t\t\t\t<input id=\"page_value\" type=\"text\" onChange={updatePagesValue}></input>\n\t\t\t\t<button id=\"get_articles\" onClick={getArticles}>Get Articles</button>\n\t\t\t</div>\n\t\t\t{loading ? <div id=\"loader\"><img alt=\"loader\" src={loader} width=\"200\" height=\"150\"></img></div> : null}\n\t\t\t<List articles={articles}></List>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}