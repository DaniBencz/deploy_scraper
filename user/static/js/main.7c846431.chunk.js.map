{"version":3,"sources":["github_blue.png","straight-loader.gif","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","articles","id","map","article","index","key","href","rel","target","App","pages","useRef","useState","setArticles","loading","setLoading","alt","src","github","width","height","type","onChange","event","current","Number","value","onClick","input","Promise","resolve","reject","undefined","then","axios","url","window","location","origin","method","data","resp","catch","err","alert","console","log","loader","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,yKCc5BC,G,MAZF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OACE,yBAAKC,GAAG,QACN,4BACGD,EAASE,KAAI,SAACC,EAASC,GACtB,OAAO,wBAAIC,IAAKD,GAAO,uBAAGE,KAAMH,EAASI,IAAI,sBAAsBC,OAAO,UAAUL,W,mDC+D/EM,MA/Df,WACE,IAAMC,EAAQC,mBADA,EAEkBC,mBAAS,IAF3B,mBAEPZ,EAFO,KAEGa,EAFH,OAGgBD,mBAAS,GAHzB,mBAGPE,EAHO,KAGEC,EAHF,KA6Cd,OACE,yBAAKd,GAAG,OACN,yBAAKA,GAAG,QACN,uBAAGK,KAAK,4CAA4CC,IAAI,sBAAsBC,OAAO,UACnF,yBAAKQ,IAAI,cAAcC,IAAKC,IAAQC,MAAM,KAAKC,OAAO,SAG1D,yBAAKnB,GAAG,QACN,wBAAIA,GAAG,gBAAP,yDACA,2BAAOA,GAAG,aAAaoB,KAAK,OAAOC,SAjDhB,SAACC,GACxBb,EAAMc,QAAUC,OAAOF,EAAMf,OAAOkB,UAiDhC,4BAAQzB,GAAG,eAAe0B,QApCZ,WAVE,IAAAC,KAWNlB,EAAMc,QAVb,IAAIK,SAAQ,SAACC,EAASC,QACbC,IAAVJ,GAAqBE,EAAQ,GACV,kBAAXF,GAAuBA,GAAS,GAAKA,EAAQ,GACzC,IAAVA,IAAaA,EAAQ,GACzBE,EAAQF,IACHG,QAMNE,MAAK,SAACL,GACLb,EAAW,GACXF,EAAY,IACZqB,IAAM,CACJC,IAAI,GAAD,OAAKC,OAAOC,SAASC,OAArB,aACHC,OAAQ,OACRC,KAAM,CACJ9B,MAAOkB,KAGRK,MAAK,SAAAQ,GACJ5B,EAAY4B,EAAKD,KAAKxC,UACtBe,EAAW,MAEZ2B,OAAM,SAAAC,GACL5B,EAAW,GACX6B,MAAM,uDAGXF,OAAM,WACLG,QAAQC,IAAI,+CAcZ,iBAEDhC,EAAU,yBAAKb,GAAG,UAAS,yBAAKe,IAAI,SAASC,IAAK8B,IAAQ5B,MAAM,MAAMC,OAAO,SAAqB,KACnG,kBAAC,EAAD,CAAMpB,SAAUA,MCrDFgD,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLhB,QAAQgB,MAAMA,EAAMC,c","file":"static/js/main.7c846431.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github_blue.5abf563c.png\";","module.exports = __webpack_public_path__ + \"static/media/straight-loader.91931453.gif\";","import React from 'react'\n\nconst List = ({ articles }) => {\n  return (\n    <div id=\"list\">\n      <ul>\n        {articles.map((article, index) => {\n          return <li key={index}><a href={article} rel=\"noopener noreferrer\" target=\"_blank\">{article}</a></li>\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default List\n","import React, { useState, useRef } from 'react'\nimport './App.css'\nimport List from './components/List'\nimport axios from 'axios'\nimport github from './github_blue.png'\nimport loader from './straight-loader.gif'\n\nfunction App () {\n  const pages = useRef()\n  const [articles, setArticles] = useState([])\n  const [loading, setLoading] = useState(0)\n\n  const updatePagesValue = (event) => {\n    pages.current = Number(event.target.value)\n  }\n\n  const validateInput = input => {\n    return new Promise((resolve, reject) => {\n      if (input === undefined) resolve(1)\n      if (typeof (input) === 'number' && input >= 0 && input < 6) {\n        if (input === 0) input = 1\n        resolve(input)\n      } else reject()\n    })\n  }\n\n  const getArticles = () => {\n    validateInput(pages.current)\n      .then((input) => {\n        setLoading(1)\n        setArticles([])\n        axios({\n          url: `${window.location.origin}/articles`,\n          method: 'post',\n          data: {\n            pages: input\n          }\n        })\n          .then(resp => {\n            setArticles(resp.data.articles)\n            setLoading(0)\n          })\n          .catch(err => {\n            setLoading(0)\n            alert('Something went wrong, please try again later!')\n          })\n      })\n      .catch(() => {\n        console.log('Input must be a number between 1 and 5')\n      })\n  }\n\n  return (\n    <div id=\"app\">\n      <div id=\"repo\">\n        <a href=\"https://github.com/DaniBencz/blog_scraper\" rel=\"noopener noreferrer\" target=\"_blank\">\n          <img alt=\"gitHub repo\" src={github} width=\"33\" height=\"33\"></img>\n        </a>\n      </div>\n      <div id=\"form\">\n        <h2 id=\"instructions\">Please type a number between 1 and 5, or leave empty!</h2>\n        <input id=\"page_value\" type=\"text\" onChange={updatePagesValue}></input>\n        <button id=\"get_articles\" onClick={getArticles}>Get Articles</button>\n      </div>\n      {loading ? <div id=\"loader\"><img alt=\"loader\" src={loader} width=\"200\" height=\"150\"></img></div> : null}\n      <List articles={articles}></List>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}